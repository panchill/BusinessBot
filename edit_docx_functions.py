import os
import requests
import io

from aiogram.types import ReplyKeyboardRemove
from API_dwnld_file import get_download_url
import reply

from aiogram.types import BufferedInputFile, URLInputFile
from aiogram import  Bot, types, F, Router
from user_private import user_private_router
from calculating_functions import main_menu_back
from calculating_functions import buttom_back
from docx import Document
from aiogram.filters import CommandStart
from aiogram.filters import  StateFilter
import reply
from aiogram.fsm.state import State,StatesGroup
from aiogram.fsm.context import FSMContext



bot = Bot(token=os.getenv('TOKEN'))

class edit_docx(StatesGroup):
    awaiting_company_name = State()
    awaiting_plus1 = State()
    awaiting_plus2 = State()
    awaiting_plus3 = State()
    awaiting_choose1 = State()
    awaiting_choose2 = State()
    awaiting_choose3 = State()
    awaiting_output = State()
    awaiting_number = State()
    awaiting_email = State()
    awaiting_address = State()
    texts = {
    'edit_docx:awaiting_company_name': '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.',
    'edit_docx:awaiting_choose1': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    'edit_docx:awaiting_choose2': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    'edit_docx:awaiting_plus1': "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_plus2': "–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_plus3': "–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_number': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_email': "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:",
    'edit_docx:awaiting_address': "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å:",
    'edit_docx:awaiting_output': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ',
}
    
def download_file(url):                                                             # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ url
    response = requests.get(get_download_url('disk:/–ª–∏—Å—Ç–æ–≤–∫–∞.docx'))
    return response.content

async def send_file(chat_id, file_content, filename):   # –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ url
    document = URLInputFile(file_content, filename=filename)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await bot.send_document(chat_id, document=document)

def replace_text_in_paragraph(paragraph, replacements):
    """Replace text in a single paragraph."""
    for old_string, new_string in replacements.items():
        if old_string in paragraph.text:
            paragraph.text = paragraph.text.replace(old_string, new_string)

def replace_text_in_run(run, replacements):
    """Replace text in a single run."""
    for old_string, new_string in replacements.items():
        if old_string in run.text:
            run.text = run.text.replace(old_string, new_string)

def replace_text_in_shapes(doc, replacements):
    """Replace text in all shapes in the document."""
    for shape in doc.element.body.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}txbxContent'):
        for paragraph in shape.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}p'):
            for run in paragraph.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}r'):
                for text in run.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t'):
                    for old_string, new_string in replacements.items():
                        if old_string in text.text:
                            text.text = text.text.replace(old_string, new_string)

def replace_text_in_tables(doc, replacements):
    """Replace text in all tables in the document."""
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    replace_text_in_paragraph(paragraph, replacements)

def replace_text_in_textboxes(doc, replacements):
    """Replace text in all textboxes in the document."""
    for shape in doc.inline_shapes:
        if not shape._inline.graphic.graphicData.uri.endswith("chart"):
            try:
                if shape.text_frame:
                    for paragraph in shape.text_frame.paragraphs:
                        replace_text_in_paragraph(paragraph, replacements)
            except AttributeError:
                continue

def edit_docx_file(content, replacements):
    doc = Document(io.BytesIO(content))
    
    for paragraph in doc.paragraphs:
        replace_text_in_paragraph(paragraph, replacements)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (shapes)
    replace_text_in_shapes(doc, replacements)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
    replace_text_in_tables(doc, replacements)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (textboxes)
    replace_text_in_textboxes(doc, replacements)
    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    doc_io = io.BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)
    return doc_io.getvalue()



async def send_edited_file(chat_id, file_content, filename="flyer.docx"):   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
    document = BufferedInputFile(file_content, filename=filename)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await bot.send_document(chat_id, document=document)

@user_private_router.message(StateFilter('*'), F.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply.start_keyboard)
    await state.clear()

    
@user_private_router.message(StateFilter(None), F.text == '‚úèÔ∏è –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é')
async def input_awaiting_company_name(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.", reply_markup=reply.leave_keyboard)
    await state.set_state(edit_docx.awaiting_company_name)

@user_private_router.message(edit_docx.awaiting_company_name, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_company_name=message.text)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=reply.back_kb)
    await state.set_state(edit_docx.awaiting_plus1)

@user_private_router.message(edit_docx.awaiting_plus1, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_plus1=message.text)
    await message.answer("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?", reply_markup=reply.accept_keyboard)
    await state.set_state(edit_docx.awaiting_choose1)

@user_private_router.message(edit_docx.awaiting_choose1, F.text == '‚úÖ –î–∞')
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await message.answer("–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=reply.back_kb)
    await state.set_state(edit_docx.awaiting_plus2)

@user_private_router.message(edit_docx.awaiting_choose1, F.text == '‚ùå –ù–µ—Ç')
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(edit_docx.awaiting_number)

@user_private_router.message(edit_docx.awaiting_plus2, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_plus2=message.text)
    await message.answer("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?", reply_markup=reply.accept_keyboard)
    await state.set_state(edit_docx.awaiting_choose2)

@user_private_router.message(edit_docx.awaiting_choose2, F.text == '‚úÖ –î–∞')
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await message.answer("–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=reply.back_kb)
    await state.set_state(edit_docx.awaiting_plus3)

@user_private_router.message(edit_docx.awaiting_choose2, F.text == '‚ùå –ù–µ—Ç')
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(edit_docx.awaiting_number)

@user_private_router.message(edit_docx.awaiting_plus3, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_plus3=message.text)
    await message.answer("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(edit_docx.awaiting_number)

@user_private_router.message(edit_docx.awaiting_number, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(awaiting_number=message.text)
        await message.answer("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:", reply_markup=reply.back_kb)
        await state.set_state(edit_docx.awaiting_email)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:")

@user_private_router.message(edit_docx.awaiting_email, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_email=message.text)
    await message.answer("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å:", reply_markup=reply.back_kb)
    await state.set_state(edit_docx.awaiting_address)

@user_private_router.message(edit_docx.awaiting_address, F.text)
async def input_awaiting_competitors(message: types.Message, state: FSMContext):
    await state.update_data(awaiting_address=message.text)
    await message.answer("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ", reply_markup=reply.upload_file_keyboard)
    await state.set_state(edit_docx.awaiting_output)

@user_private_router.message(edit_docx.awaiting_output, F.text)
async def output(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    data = await state.get_data()
    file_content = download_file(get_download_url('disk:/–ª–∏—Å—Ç–æ–≤–∫–∞.docx'))
    replacements = {
        "–ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò" : data.get('awaiting_company_name', ''),
        "–ü–†–ï–ò–ú–£–©–ï–°–¢–í–û 1" : data.get('awaiting_plus1', ''),
        "–ü–†–ï–ò–ú–£–©–ï–°–¢–í–û 2" : data.get('awaiting_plus2', ''),
        "–ü–†–ï–ò–ú–£–©–ï–°–¢–í–û 3" : data.get('awaiting_plus3', ''),
        "–¢–ï–õ–ï–§–û–ù" : data.get('awaiting_number', ''),
        "–ò–ú–≠–ò–õ" : data.get('awaiting_email', ''),
        "ADR" : data.get('awaiting_address', ''),
                   }
    edited_content = edit_docx_file(file_content, replacements)
    await send_edited_file(chat_id, edited_content)
    await message.answer("–í–∞—à —Ñ–ª–∞–µ—Ä –≥–æ—Ç–æ–≤ üòâ", reply_markup=reply.start_keyboard)                                                 
    await state.clear()

