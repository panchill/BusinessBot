
from aiogram import types, Router, F
from dotenv import find_dotenv, load_dotenv

user_private_router = Router()
load_dotenv(find_dotenv())

from functions import user_inputs
from functions import del_mess
from functions import cmd_return_back
from functions import cmd_create_plan
from functions import cmd_pattern
from functions import cmd_manual
from functions import —Åmd_about_bot
from functions import cmd_calculate
from functions import cmd_helpful
from functions import cmd_links
from functions import excel_upload
from functions import cmd_benchmarking
from functions import cmd_pest
from functions import cmd_competitors
from functions import cmd_product_description
from API_dwnld_file import get_download_url
from calculating_functions import buttom_back
from calculating_functions import input_clients
from calculating_functions import main_menu_back
from calculating_functions import input_product_cost
from calculating_functions import input_product_cost_TAM
from calculating_functions import input_income
from calculating_functions import input_advert_cost
from calculating_functions import input_quantity_clients
from edit_docx_functions import input_awaiting_company_name


@user_private_router.message(F.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')        
async def back_router(message: types.Message):
    await cmd_return_back(message)

@user_private_router.message(F.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')        
async def back_router(message: types.Message):
    await buttom_back(message)

@user_private_router.message(F.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')        
async def main_menu_back_router(message: types.Message):
    await main_menu_back(message)

@user_private_router.message(F.text == '‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–ª–∞–µ—Ä')        
async def functional_cmd(message: types.Message):
    await cmd_create_plan(message)
    # await message.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ')

@user_private_router.message()        
async def functional_cmd(message: types.Message):
    text = message.text
    await del_mess(message)
    if text == '‚úèÔ∏è –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é':
        await input_awaiting_company_name(message, user_inputs)
    elif text == 'üí¨ –û –±–æ—Ç–µ':
        await —Åmd_about_bot(message)
    elif text == '‚ûï –í—ã—á–∏—Å–ª–∏—Ç—å':
        await cmd_calculate(message) 
    elif text == 'üìù –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã':
        await cmd_helpful(message)    
    elif text == 'üìä Excel —Ç–∞–±–ª–∏—Ü—ã':
        await excel_upload(message)    
    elif text == 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
        await cmd_links(message)
    elif text == 'üîπ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI)':
        await input_income(message, user_inputs)
    elif text == 'üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞ (CPC)':
        await input_clients(message, user_inputs) 
    elif text == 'üîπ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä—ã–Ω–æ–∫ (PAM)':
        await input_quantity_clients(message, user_inputs)  
    elif text == 'üîπ –û–±—â–∏–π –æ–±—ä–µ–º —Ä—ã–Ω–∫–∞ (TAM)':
        await input_product_cost_TAM(message, user_inputs)
    elif text == 'üîπ –î–æ—Å—Ç—É–ø–Ω–∞—è –µ–º–∫–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (SAM)':
        await input_product_cost(message, user_inputs) 
    elif text == 'üîπ –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (NPS)':
        await input_clients(message, user_inputs) 
    elif text == 'üìî –®–∞–±–ª–æ–Ω –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞':
        await cmd_pattern(message, get_download_url('disk:/–®–∞–±–ª–æ–Ω –ë–ü.docx'))
    elif text == 'üìñ –ú–µ—Ç–æ–¥–∏—á–∫–∞':
        await cmd_manual(message, get_download_url('disk:/–º–µ—Ç–æ–¥–∏—á–∫–∞.docx'))
    elif text == 'üî∂ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã':
        await cmd_competitors(message, get_download_url('disk:/competitors.xlsx'))
    elif text == 'üî∂ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏':
        await cmd_product_description(message, get_download_url('disk:/product_description.xlsx'))
    elif text == 'üî∂ Pest –∞–Ω–∞–ª–∏–∑':
        await cmd_pest(message, get_download_url('disk:/pest-analysis.xlsx'))
    elif text == 'üî∂ –ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥':
        await cmd_benchmarking(message, get_download_url('disk:/–ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥.xlsx'))

