
from aiogram import  types, F
from aiogram.filters import CommandStart
from aiogram.filters import  StateFilter
import reply
from aiogram.fsm.state import State,StatesGroup
from aiogram.fsm.context import FSMContext
from user_private import user_private_router


class edit_docx(StatesGroup):
    awaiting_company_name = State()
    awaiting_plus1 = State()
    awaiting_plus2 = State()
    awaiting_plus3 = State()
    awaiting_choose1 = State()
    awaiting_choose2 = State()
    awaiting_choose3 = State()
    awaiting_output = State()
    awaiting_number = State()
    awaiting_email = State()
    awaiting_address = State()
    texts = {
    'edit_docx:awaiting_company_name': '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.',
    'edit_docx:awaiting_choose1': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    'edit_docx:awaiting_choose2': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    'edit_docx:awaiting_plus1': "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_plus2': "–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_plus3': "–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_number': "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:",
    'edit_docx:awaiting_email': "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:",
    'edit_docx:awaiting_address': "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å:",
    'edit_docx:awaiting_output': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ',
}

class NPS_coeff(StatesGroup):

    total_users = State()
    promoters = State()
    critics = State()
    texts = {
            'NPS_coeff:total_users' : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:',
            'NPS_coeff:promoters' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ "9-10":',
            'NPS_coeff:critics' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ "0-6":',
            }
    
@user_private_router.message(StateFilter('*'), CommandStart())
async def main_menu_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å –ø–ª–∞–Ω–∞\n\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=reply.start_keyboard)
    

@user_private_router.message(StateFilter('*'), F.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply.start_keyboard)
    await state.clear()

@user_private_router.message(StateFilter('*'), F.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def buttom_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == NPS_coeff.total_users:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in NPS_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{NPS_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == SAM_coeff.product_cost:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in SAM_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{SAM_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == TAM_coeff.product_cost:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in TAM_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{TAM_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == ROI_coeff.income:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in ROI_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{ROI_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == CPC_coeff.advert_cost:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in CPC_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{CPC_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == PAM_coeff.quantity_clients:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in PAM_coeff.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{PAM_coeff.texts[previous.state]}')
            return
        previous = step

    if current_state == edit_docx.awaiting_company_name:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.leave_keyboard)
        return
    previous = None

    for step in edit_docx.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'{edit_docx.texts[previous.state]}')
            return
        previous = step
    

@user_private_router.message(StateFilter(None), F.text == 'üîπ –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (NPS)')
async def input_promotes(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:", reply_markup=reply.leave_keyboard)
    await state.set_state(NPS_coeff.total_users)

@user_private_router.message(NPS_coeff.total_users, F.text)
async def input_promotes(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(total_users=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ '9-10':", reply_markup=reply.back_kb)
        await state.set_state(NPS_coeff.promoters)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:")
    
@user_private_router.message(NPS_coeff.promoters, F.text)
async def input_critics(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(promoters=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ '0-6':", reply_markup=reply.back_kb)
        await state.set_state(NPS_coeff.critics)
    else:   
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ '9-10':")

@user_private_router.message(NPS_coeff.critics, F.text)
async def input_clients(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(critics=message.text)
        data = await state.get_data()
        total_users = float(data["total_users"])
        promoters = float(data["promoters"])
        critics = float(data["critics"])
        # –†–∞—Å—á–µ—Ç ROI (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
        NPS = (promoters-critics)/total_users * 100
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à NPS: {NPS:.2f}%", reply_markup=reply.calculate_keyboard)                                                 
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ '0-6':")

class SAM_coeff(StatesGroup):

    product_cost = State()
    quantity_buying_users = State()
    texts = {
            'SAM_coeff:product_cost' : '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
            'SAM_coeff:quantity_buying_users' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ–∫—É–ø–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä –∏ –∞–Ω–∞–ª–æ–≥–∏:',

            }

@user_private_router.message(StateFilter(None), F.text == 'üîπ –î–æ—Å—Ç—É–ø–Ω–∞—è –µ–º–∫–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (SAM)')
async def input_product_cost(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply.leave_keyboard)
    await state.set_state(SAM_coeff.product_cost)

@user_private_router.message(SAM_coeff.product_cost, F.text)
async def input_quantity_buying_users(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(product_cost=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ–∫—É–ø–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä –∏ –∞–Ω–∞–ª–æ–≥–∏:", reply_markup=reply.back_kb)
        await state.set_state(SAM_coeff.quantity_buying_users)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")

@user_private_router.message(SAM_coeff.quantity_buying_users, F.text)
async def output(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(quantity_buying_users=message.text)
        data = await state.get_data()
        product_cost = float(data["product_cost"])
        quantity_buying_users = float(data["quantity_buying_users"])
        SAM = product_cost * quantity_buying_users
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à SAM: {SAM:.2f}", reply_markup=reply.calculate_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ–∫—É–ø–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä –∏ –∞–Ω–∞–ª–æ–≥–∏:")

class TAM_coeff(StatesGroup):

    product_cost = State()
    quantity_users = State()
    texts = {
            'TAM_coeff:product_cost' : '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
            'TAM_coeff:quantity_users' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö:',

            }

@user_private_router.message(StateFilter(None), F.text == 'üîπ –û–±—â–∏–π –æ–±—ä–µ–º —Ä—ã–Ω–∫–∞ (TAM)')
async def input_product_cost_TAM(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply.leave_keyboard)
    await state.set_state(TAM_coeff.product_cost)

@user_private_router.message(TAM_coeff.product_cost, F.text)
async def input_quantity_users(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(product_cost=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö:", reply_markup=reply.back_kb)
        await state.set_state(TAM_coeff.quantity_users)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")

@user_private_router.message(TAM_coeff.quantity_users, F.text)
async def output(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(quantity_users=message.text)
        data = await state.get_data()
        product_cost = float(data["product_cost"])
        quantity_users = float(data["quantity_users"])
        TAM = product_cost * quantity_users
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à TAM: {TAM:.2f}", reply_markup=reply.calculate_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö:")

class ROI_coeff(StatesGroup):

    income = State()
    expense = State()
    texts = {
            'ROI_coeff:income' : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥:',
            'ROI_coeff:expense' : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:',

            }

@user_private_router.message(StateFilter(None), F.text == 'üîπ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI)')
async def input_income(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥:", reply_markup=reply.leave_keyboard)
    await state.set_state(ROI_coeff.income)

@user_private_router.message(ROI_coeff.income, F.text)
async def input_quantity_users(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(income=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:", reply_markup=reply.back_kb)
        await state.set_state(ROI_coeff.expense)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥:")

@user_private_router.message(ROI_coeff.expense, F.text)
async def output(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(expense=message.text)
        data = await state.get_data()
        income = float(data["income"])
        expense = float(data["expense"])
        roi = (income - expense) / expense * 100
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à ROI: {roi:.2f}%", reply_markup=reply.calculate_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö:")

class CPC_coeff(StatesGroup):

    advert_cost = State()
    quantity_clicks = State()
    texts = {
            'CPC_coeff:advert_cost' : '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã:',
            'CPC_coeff:quantity_clicks' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:',

            }

@user_private_router.message(StateFilter(None), F.text == 'üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞ (CPC)')
async def input_advert_cost(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã:", reply_markup=reply.leave_keyboard)
    await state.set_state(CPC_coeff.advert_cost)

@user_private_router.message(CPC_coeff.advert_cost, F.text)
async def input_quantity_users(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(advert_cost=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:", reply_markup=reply.back_kb)
        await state.set_state(CPC_coeff.quantity_clicks)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã:")


@user_private_router.message(CPC_coeff.quantity_clicks, F.text)
async def output(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(quantity_clicks=message.text)
        data = await state.get_data()
        advert_cost = float(data["advert_cost"])
        quantity_clicks = float(data["quantity_clicks"])
        CPC = advert_cost / quantity_clicks
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à CPC: {CPC:.2f}", reply_markup=reply.calculate_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:")

class PAM_coeff(StatesGroup):

    quantity_clients = State()
    cost_of_system = State()
    texts = {
            'PAM_coeff:quantity_clients' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:',
            'PAM_coeff:cost_of_system' : '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:',

            }

@user_private_router.message(StateFilter(None), F.text == 'üîπ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä—ã–Ω–æ–∫ (PAM)')
async def input_quantity_clients(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:", reply_markup=reply.leave_keyboard)
    await state.set_state(PAM_coeff.quantity_clients)

@user_private_router.message(PAM_coeff.quantity_clients, F.text)
async def input_quantity_users(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(quantity_clients=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:", reply_markup=reply.back_kb)
        await state.set_state(PAM_coeff.cost_of_system)
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:")

@user_private_router.message(PAM_coeff.cost_of_system, F.text)
async def output(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(cost_of_system=message.text)
        data = await state.get_data()
        quantity_clients = float(data["quantity_clients"])
        cost_of_system = float(data["cost_of_system"])
        PAM = quantity_clients * cost_of_system
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à PAM: {PAM:.2f}", reply_markup=reply.calculate_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ üò∞\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:")


