    # elif text == 'üî∂ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω':
    #     await choose_points_2(message)
    # elif text == 'üî∂ –ü–ª–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞':
    #     await choose_points_2(message)
    # elif text == 'üî∂ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤':
    #     await choose_points_2(message)
    # elif text == '‚òëÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä':
    #     await cancel_choose(message)
    # elif text == 'üî∂ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏':
    #     await choose_points_2(message)
    # elif text == 'üî∂ Pest –∞–Ω–∞–ª–∏–∑':
    #     await choose_points_2(message)
    # elif text == 'üî∂ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã':
    #     await choose_points_2(message)

# bp_points_keyboard = ReplyKeyboardMarkup(
#     keyboard=
# [
#     [
#         KeyboardButton(text='üî∂ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'),
#         KeyboardButton(text='üî∂ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'),
#         KeyboardButton(text='üî∂ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–π –ø–ª–∞–Ω'),
#     ],
#     [
#         KeyboardButton(text='üî∂ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω'),
#         KeyboardButton(text='üî∂ –ü–ª–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'),
#         KeyboardButton(text='üî∂ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤'),
#     ],
#     {
#         KeyboardButton(text = 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
#     }
# ],resize_keyboard=True
# )

# accept_keyboard = ReplyKeyboardMarkup(
#     keyboard=
# [
#     [
#         KeyboardButton(text='‚úÖ –î–∞'),
#         KeyboardButton(text='‚ùå –ù–µ—Ç')
#     ],
#     {
#         KeyboardButton(text = 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
#     }
# ],resize_keyboard=True
# )

# questions_keyboard = ReplyKeyboardMarkup(
#     keyboard=
# [
#     [
#         KeyboardButton(text = '‚òëÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä'),
#         KeyboardButton(text = 'üìë –í—ã–±—Ä–∞—Ç—å –µ—â–µ')
#     ],
#     {
#         KeyboardButton(text = 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
#     }
# ],resize_keyboard=True
# )


# async def cmd_create_all_plan(message: types.Message):
#     await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n\n–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞!", reply_markup=reply.create_plan_keyboard)

# async def choose_points(message: types.Message):
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–µ:", reply_markup=reply.bp_points_keyboard)  


# async def choose_points_2(message: types.Message):
#     await message.answer("–ü—É–Ω–∫—Ç –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=reply.questions_keyboard)      



# active = False
    # start_found = False
    # delete_after = None

    # # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    # for i, para in enumerate(doc.paragraphs):
    #     if start_phrase in para.text:
    #         active = True
    #         start_found = True
    #         continue
    #     elif end_phrase in para.text and start_found:
    #         active = False
    #         delete_after = i
    #         break
    #     if not active:
    #         para._element.clear_content()

    # # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ delete_after
    # if delete_after is not None and len(doc.paragraphs) > delete_after:
    #     while len(doc.paragraphs) > delete_after:
    #         p = doc.paragraphs[delete_after]
    #         p._element.getparent().remove(p._element)

     # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö